{
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Parameters" : {
        "InstanceType" : {
            "Description" : "EC2 instance type",
            "Type" : "String",
            "Default" : "t2.micro",
            "AllowedValues" : [ "t2.micro", "t2.small", "t2.medium", "c4.large", "m4.large" ],
            "ConstraintDescription" : "Must be a valid EC2 instance type."
        },
        "AvailabilityZone": {
            "Description": "Availability Zone of the Subnet",
            "Type": "AWS::EC2::AvailabilityZone::Name"
        },
        "AMILookupModuleName" : {
            "Description" : "The name of the JavaScript file",
            "Type" : "String",
            "Default" : "amilookup"
        },
        "AMILookupS3Bucket" : {
            "Description" : "The name of the bucket that contains your packaged source",
            "Type" : "String"
        },
        "AMILookupS3Key" : {
            "Description" : "The name of the ZIP package",
            "Type" : "String",
            "Default" : "amilookup.zip"
        },
        "SSHKeyName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "SSHLocation" : {
            "Description" : "The IP address range that can be used to SSH to the EC2 instances",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "0.0.0.0/0",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
        },
        "PrivateNetwork" : {
            "Description" : "Private network where registry should be available",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "172.0.0.0/8",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
        }
    },
    "Resources" : {
        "Storage" : {
            "Type" : "AWS::S3::Bucket",
            "Properties" : {
                "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackName"} } ]
            }
        },

        "RegistryInstance": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "InstanceType" : { "Ref" : "InstanceType" },
                "ImageId" : { "Fn::GetAtt": [ "AMIInfo", "Id" ] },
                "AvailabilityZone" : { "Ref" : "AvailabilityZone" },
                "SecurityGroupIds" : [ { "Ref" : "InstanceSecurityGroup" } ],
                "IamInstanceProfile" : { "Ref": "StorageRWProfile" },
                "KeyName" : { "Ref" : "SSHKeyName" },
                "Tags" : [
                    { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
                    { "Key" : "Name", "Value" : "registry" }
                ],
                "UserData": { "Fn::Base64" : { "Fn::Join" : ["", [
                    "#!/bin/bash -xe\n",
                    "yum update -y\n",
                    "export CFN_PARAMS='",
                    " --region ", { "Ref" : "AWS::Region" },
                    " --stack ", { "Ref" : "AWS::StackId" },
                    " --resource RegistryInstance", "'\n",
                    "/opt/aws/bin/cfn-init -v -c default $CFN_PARAMS\n",
                    "/opt/aws/bin/cfn-signal -e 0 $CFN_PARAMS\n"
                ]]}}
            },
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets" : {
                        "default" : [ "docker_host", "docker_registry" ]
                    },
                    "docker_host" : {
                        "packages" : {
                            "yum" : {
                                "docker" : []
                            }
                        },
                        "commands" : {
                            "1_docker_user" : {
                                "command" : "usermod -aG docker ec2-user"
                            },
                            "2_install_compose" : {
                                "command" : "pip install docker-compose"
                            }
                        },
                        "services" : {
                            "sysvinit" : {
                                "docker" : {
                                    "enabled" : true,
                                    "ensureRunning" : "true"
                                }
                            }
                        }
                    },
                    "docker_registry" : {
                        "files" : {
                            "/opt/registry/compose.yml" : {
                                "content" : { "Fn::Join" : [ "", [
                                    "registry:\n",
                                    "  restart: always\n",
                                    "  image: registry:2\n",
                                    "  container_name: registry\n",
                                    "  ports:\n",
                                    "    - 80:5000\n",
                                    "  environment:\n",
                                    "    REGISTRY_STORAGE: s3\n",
                                    "    REGISTRY_STORAGE_S3_REGION: ", { "Ref" : "AWS::Region" }, "\n",
                                    "    REGISTRY_STORAGE_S3_ACCESSKEY: ''\n",
                                    "    REGISTRY_STORAGE_S3_SECRETKEY: ''\n",
                                    "    REGISTRY_STORAGE_S3_BUCKET: ", { "Ref" : "Storage" }, "\n",
                                    "  volumes:\n",
                                    "    - /opt/registry/certs:/certs:ro\n"
                                ]]},
                                "mode" : "000664",
                                "group" : "docker"
                            }
                        }
                    }
                }
            },
            "CreationPolicy" : {
                "ResourceSignal" : {
                    "Timeout" : "PT5M"
                }
            }
        },

        "AMIInfo": {
            "Type": "Custom::AMIInfo",
            "Properties": {
                "ServiceToken": { "Fn::GetAtt" : [ "AMIInfoFunction", "Arn" ] },
                "Region": { "Ref": "AWS::Region" },
                "Architecture": "HVM64"
            }
        },

        "AMIInfoFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": { "Ref": "AMILookupS3Bucket" },
                    "S3Key": { "Ref": "AMILookupS3Key" }
                },
                "Handler": { "Fn::Join" : [ "", [ { "Ref": "AMILookupModuleName" },".handler"] ] },
                "Role": { "Fn::GetAtt" : [ "LambdaExecutionRole", "Arn" ] },
                "Runtime": "nodejs",
                "Timeout": "30"
            }
        },

        "LambdaExecutionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": { "Service": [ "lambda.amazonaws.com" ] },
                        "Action": [ "sts:AssumeRole" ]
                    }]
                },
                "Path": "/",
                "Policies": [{
                    "PolicyName": "root",
                    "PolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [{
                            "Effect": "Allow",
                            "Action": [ "logs:CreateLogGroup", "logs:CreateLogStream", "logs:PutLogEvents" ],
                            "Resource": "arn:aws:logs:*:*:*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [ "ec2:DescribeImages" ],
                            "Resource": "*"
                        }]
                    }
                }]
            }
        },

        "StorageRWProfile" : {
            "Type" : "AWS::IAM::InstanceProfile",
            "Properties" : {
                "Path" : "/",
                "Roles" : [ {
                    "Ref" : "StorageRWRole"
                }]
            }
        },

        "StorageRWRole" : {
            "Type" : "AWS::IAM::Role",
            "Properties" : {
                "AssumeRolePolicyDocument" : {
                    "Version" : "2012-10-17",
                    "Statement" : [
                        {
                            "Effect" : "Allow",
                            "Principal" : {
                                "Service" : "ec2.amazonaws.com"
                            },
                            "Action" : "sts:AssumeRole"
                        }
                    ]
                },
                "Path" : "/",
                "Policies" : [ {
                    "PolicyName" : "StorageRW",
                    "PolicyDocument" : {
                        "Version" : "2012-10-17",
                        "Statement" : [
                            {
                                "Effect" : "Allow",
                                "Action" : [
                                    "s3:ListBucket",
                                    "s3:GetBucketLocation",
                                    "s3:ListBucketMultipartUploads"
                                ],
                                "Resource" : { "Fn::Join" : [ "", [ "arn:aws:s3:::", { "Ref" : "Storage" } ]]}
                            },
                            {
                                "Effect" : "Allow",
                                "Action" : [
                                    "s3:PutObject",
                                    "s3:GetObject",
                                    "s3:DeleteObject",
                                    "s3:ListMultipartUploadParts",
                                    "s3:AbortMultipartUpload"
                                ],
                                "Resource" : { "Fn::Join" : [ "", [ "arn:aws:s3:::", { "Ref" : "Storage" }, "/*" ]]}
                            }
                        ]
                    }
                }]
            }
        },

        "InstanceSecurityGroup" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "Enable SSH access via port 22, and API on port 80 for private network",
                "SecurityGroupIngress" : [
                    {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "SSHLocation"}},
                    {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : { "Ref" : "PrivateNetwork"}}
                ]
            }
        }
    },
    "Outputs": {
        "PublicIP": {
            "Description": "Public IP address of the newly created EC2 instance",
            "Value": {
                "Fn::GetAtt": [
                    "RegistryInstance",
                    "PublicIp"
                ]
            }
        }
    }
}
